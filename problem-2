//Time: O(2^n) where n is length of array ie total number of houses
// space : O(1) explicit auxillary space not used
class Solution {
    public int rob(int[] nums) {
        return helper(nums,0,0);
        
}
    private int helper(int[] nums, int amount, int i)
    {
        if(i>=nums.length ) return amount;
       // if(amount==0) return amount;
        int case1 = helper(nums, amount,i+1);
        int case2=  helper(nums,amount+nums[i],i+2);
        return Math.max(case1, case2);
    }
}
//Dp solution 1
// Time = O(n)
//Space : O(1)
class Solution {
    public int rob(int[] nums) {
        int even_sum=0,odd_sum=0;
        for(int i=0;i<nums.length;i++)
        {
            if(i%2==0)
                even_sum=Math.max(even_sum+nums[i],odd_sum);
            else
                odd_sum=Math.max(odd_sum+nums[i],even_sum);
        }
        return Math.max(even_sum,odd_sum);
    }
}

//DP solution 2
//time : O(n) where n is number of houses
//space : O(n) dp array is used to store n houses
class Solution {
    public int rob(int[] nums) {
        if(nums==null || nums.length==0) return 0;
        int[][] dp= new int[nums.length][2];
        //fill first row with default values
        dp[0][0]=0;
        dp[0][1]=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            //check prev row and max value from both columns: choosen(1) or not choosen(0)
            dp[i][0]=Math.max(dp[i-1][0], dp[i-1][1]);
            //current value + prev row not choosen value
            dp[i][1]=nums[i]+dp[i-1][0];
            
        }
        //return max value from last row
      return Math.max(dp[nums.length-1][0],dp[nums.length-1][1]);
    }
}

