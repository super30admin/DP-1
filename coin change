// Time Complexity :O(MN)
// Space Complexity :O(MxN) matrix 2d which os size n x m(0-amount)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :
computing value for the 2d matrix

// Your code here along with comments explaining your approach
class Solution {
    public int coinChange(int[] coins, int amount) {
        if(coins.length==0 || coins == null)
            return -1;
        int dp[][] = new int[coins.length+1][amount+1];
        
        //initialize dp
        for(int i=1; i<dp[0].length; i++)
        {
            dp[0][i] = amount+1;
        }
        
        for(int i=1; i<dp.length; i++)
        {
            for(int j=1; j<dp[0].length; j++)
            {
                  if(coins[i-1] > j)
                      dp[i][j] = dp[i-1][j];
                
                else
                {
                    dp[i][j] = Math.min(dp[i-1][j], (dp[i][j-coins[i-1]]+1));
                }
            }
        }
        
        return dp[dp.length-1][dp[0].length-1]== amount+1?-1:dp[dp.length-1][dp[0].length-1];
        
    }
    
   
}
