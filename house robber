// Time Complexity : O(n)
// Space Complexity : O(1) constant
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
reduce the space complexity

// Your code here along with comments explaining your approach
class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        
        int[] sum_robbed_value = {0, nums[0]};
        int i=1;
        
        while(i<nums.length)
        {
            
            int not_robbed = Math.max(sum_robbed_value[0], sum_robbed_value[1]);
            int robbed = sum_robbed_value[0] + nums[i];
            sum_robbed_value[0] = not_robbed;
            sum_robbed_value[1] = robbed;
             i++;
        }
        return Math.max(sum_robbed_value[0], sum_robbed_value[1]);
    }
    
    
   
}
